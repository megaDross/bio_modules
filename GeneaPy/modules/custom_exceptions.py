""" Customs exceptions used throughout the package """


class AmbigousBase(Exception):
    """ Non-ATCG bases in a sequence raises Exception"""

    def __init__(self, name, seq, msg=None):
        if not msg:
            msg = "Non-ATGC base found in {} primer {}".format(name, seq)
        Exception.__init__(self, msg)
        self.name = name
        self.seq = seq
        self.msg = msg


class NoAmplicon(Exception):
    """ Raise an Execption if no amplicon is generated by isPCR"""

    def __init__(self, name, msg=None):
        if not msg:
            msg = "No amplicon can be generated with the primer pair {}".format(name)
        Exception.__init__(self, msg)
        self.name = name
        self.msg = msg


class MultipleAmplicons(Exception):
    """ Raise if multiple amplicons are generated by isPCR"""

    def __init__(self, name, number, msg=None):
        if not msg:
            msg = "The primer pair {} generates {} amplicons".format(name, number)
        Exception.__init__(self, msg)
        self.name = name
        self.number = number
        self.msg = msg


class WrongHG(Exception):
    """ Raise an exception if the human genom version is invalid"""

    def __init__(self, hg_version, acceptable_hg=["hg38", "hg19"], msg=None):
        if not msg:
            msg = "{} is not a valid genome version ({}).".format(
                hg_version, ", ".join(acceptable_hg)
            )
        Exception.__init__(self, msg)
        self.hg_version = hg_version
        self.acceptable_hg = acceptable_hg
        self.msg = msg


class NoProteinCodingTranscript(Exception):
    """ Raise if no protein coding transcript is present"""

    def __init__(self, transcript, msg=None):
        if not msg:
            msg = "No protein coding transcript was found in {}".format(
                transcript.gene.name
            )
        Exception.__init__(self, msg)
        self.msg = msg
        self.transcript = transcript


class NoSequence(Exception):
    """ Raise if no sequence is found within the given range"""

    def __init__(self, seq_range, msg=None):
        if not msg:
            msg = "No sequence was found at {}".format(seq_range)
        Exception.__init__(self, msg)
        self.msg = msg
        self.seq_range = seq_range


class EmptyDataFrame(Exception):
    def __init__(self):
        Exception.__init__(self)


class UnmatchedVariants(Exception):
    """ Raise if variant does not match with any primer in a database"""

    def __init__(self, unmatched, msg=None):
        if not msg:
            msg = "Cannot find primers for: {}".format(", ".join(unmatched))
        Exception.__init__(self, msg)
        self.unmatched = unmatched


class NoGene(Exception):
    def __init__(self, contig, position, msg=None):
        if not msg:
            msg = "No gene is present at chr{}:{}".format(contig, position)
        Exception.__init__(self, msg)
        self.contig = contig
        self.position = position


class MultipleGenes(Exception):
    def __init__(self, contig, locus, genes, msg=None):
        if not msg:
            msg = "more than one gene is present at {}: {}".format(
                "{}:{}".format(contig, locus), ", ".join(genes)
            )
        Exception.__init__(self, msg)
        self.contig = contig
        self.locus = locus
        self.gene = genes


class NoExon(Exception):
    def __init__(self, release, contig, position, msg=None):
        if not msg:
            msg = "No exon is present at {}:{} in Ensembl realese {}".format(
                contig, position, release
            )
        Exception.__init__(self, msg)
        self.contig = contig
        self.position = position


class ExonMismatch(Exception):
    def __init__(self, pyexon_id, exon_id, msg=None):
        if not msg:
            msg = "The exon ID scrapped from pyensembl ({}) and "
            "from geneapy ({}) do not match".format(pyexon_id, exon_id)
        Exception.__init__(self, msg)
        self.pyexon_id = pyexon_id
        self.exon_id = exon_id
