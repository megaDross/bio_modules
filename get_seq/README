- ENSEMBL SCRAPPER PYENSEMBL MAYBE USEFUL FOR OUTPUTTING TO FILE
- OPTION TO OUTPUT IN FASTA FORMAT OR COMPARING TO A .SEQ FILE
- ALTER PRINT OUTPUT TO PROPER FASTA FORMAT? HEADER OPTION



python3 get_seq.py ~/in.txt  --header --output_file yyy --upstream 30 --downstream 35 --seq_file README --output_file yyy



Usage: get_seq.py [OPTIONS] [INPUT_FILE]

  Produce a sequence using the UCSC DAS server from an inputted genomic
  postion and defined number of bases upstream and downstream from said
  position. A genomic range can be used in place of a genomic position
  and renders the upstream/downstream options irrelevant. An input file
  can have a mixture of genomic positions and genomic ranges.      

  A file or string can be used as input. STRING: either a variant position
  or a genomic range deliminated by a comma. FILE: deliminated file with
  the variant name and the variant position      

  Example:

      main chr1:169314424 --dash --upstream 200 --downstream 200

      main chr1:169314424,169314600 --hg_version hg38

      main input.txt --output_file output.txt --header



Options:
  --output_file TEXT      give an output file, requires input to be a file
  --upstream INTEGER      number of bases to get upstream, default: 20
  --downstream INTEGER    number of bases to get downstream, default: 20
  --hg_version TEXT       human genome version. default: hg19
  --header / --no_header  header gives metadata i.e. sequence name etc.
  --transcribe / --nr     transcribe into RNA sequence
  --translate / --np      translate RNA seq into protein seq
  --rc / --no_rc          reverse complement the DNA
  --seq_file TEXT         match sequence with .seq file contents
  --help                  Show this message and exit.



#####

get_seq <arg> --header --hg_version hg19
    - the argument must be a variant_position, genomic_range or a tab deliminated file (Name\tPosition/Genomic_range)
    - genomic_range is not compatible with comparing with a seq_file
    - the header option prints the reference sequence with the variant position base capatilised 
    - --header prints the name of variant, variant position, genomic corodinates of the outputted sequence
    - --hg_version which hg version should the sequence be scrapped from (hg16, hg17, hg18, hg19, hg38)


get_seq <arg> --transcribe --rc --translate
    - reverse complement the DNA, transcribe to mRNA from first AUG codon and translate to protein sequence
    - translate will take off one ntp until the length of the mRNA is divisable by 3


get_seq <var_pos> --upstream 200 --downstream 200
    - how many bases upstream and downstream from the var_pos to be scrapped from UCSC (defualted to 20 for both)

get_seq <var_pos> --seq_file <path-to-file>
    - take the reference sequence generated from UCSC and compare it to a selected .seq file. This essential searches for the scrapped sequence occuring before a give var_position within the .seq file. If found, the var_pos from the scrapped reference and the .seq file are compared and a statment is printed determing whether the base for the given position is the same or different in both the reference and .seq file.

get_seq <file> --seq_file
    - similar to the above except an argument doesnt need to be given for --seq_file (if given it will be ignored). Instead, the Name from the first clumn of the inputted file will be used to search for a matching .seq file in the get_seq/seq_files directory. This will then be used to compare the reference sequence to the .seq file sequence.
    - PROBLEM: if no matched sequence found then `pass`. The problem is this is required for the program to continue however I need a message to be displayed to communicate this to the user


get_seq <file> --seq_file --output_file
     - as above except the output file gives the Name, Variant Position, Genomic Range of the given sequence, the Reference nucleotide at the given variant position, the .seq file nucleotide at the given variant position and the Result (0 if they are the same, 1 if they are different,has been found 2 if no matching .seq file was found).
    - output_file only works if an input_file is given









Installation
----------------------------------------------------------------------------------
git clone https://github.com/superDross/bio_modules/sequence_tools/
cd sequence_tools
pip install --editable .


Design
-----------------------------------------------------------------------------------

get_seq()	
	|	determines whether or not the input is a STRING or a FILE.
	|	STRING: creates a list [name_var,\t,var_pos/genomic_region]
	|		and inputs it into get_seq_data()
	|	FILE: opens the file and it is parsed into get_seq_data(). the
	|	      returned list is iterated through so the contents can be
	|	      written to an output_file (ONLY works if --output_file is
	|	      utilised).
	V
get_seq_data()
 |    |  |	iterate through each line, split by the delimiter (name & genomic 
 |    |  |	pos/range) and parse into the functions contained within the 
 |    |  |	processing class (in order; 1,2,3). handle_argument_exceptions are
 |    |  |      handled here. create_region() is only utilised if a genomic position
 |3   |2 |1	is inputted instead of a genomic range. 
 |    |	 |
 |    |	 V
 |    |	handle_argument_exceptions()	
 |    |                                 each line is determined whether it contains 
 |    |					a WrongHGversion; a version of the human
 |    |					genome which is unsupported by UCSC, a 
 |    |					TypographyError; less/more than one colon
 |    |					&/or more than one comma or dash, ErrorUCSC;
 |    |					UCSC DAS server returns nothing, if so raise
 |    |					exception
 |    V
 |   create_region()	
 |                      construct a genomic range from a genomic position by subtracting
 |			and adding the integers associated with the upstream and the
 |			downstream variable respectively and place a comma between the
 |			two resulting integers i.e 1:123456 --> 1:123436,123476
 V
get_region_info()	
			use the hg_version and the created/inputted genomic range into 
			the UCSC DAS server link, filter the returned info for the 
			sequence only and determine whether to flank the genomic
			position with a dash (if --dash BOOLEAN is selected) and return
			to get_seq() and print to the screen.
 
